spring.application.name=restmvc

# Esta property hace falta para que se vea el log.
# Estamos indicando que to-do lo que hay en el package com.jmunoz lo ponemos a nivel debug.
logging.level.com.jmunoz=debug

# Hibernate puede crear un script de creacion de BD (nombre en este caso drop-and-create.sql,
# que es el indicado en la ultima property de las aqui indicadas)
# El problema es que, cada vez que se ejecuta el programa, añade de nuevo los scripts en vez de sustituirlos.
# Se comenta para que no siga creciendo el fichero drop-and-create.sql con cada ejecucion
#
#spring.jpa.properties.jakarta.persistence.schema-generation.scripts.action=drop-and-create
#spring.jpa.properties.jakarta.persistence.schema-generation.scripts.create-source=metadata
#spring.jpa.properties.jakarta.persistence.schema-generation.scripts.drop-target=drop-and-create.sql
#spring.jpa.properties.jakarta.persistence.schema-generation.scripts.create-target=drop-and-create.sql

# Deshabilitamos Flyway
spring.flyway.enabled=false

# Cambiando el nivel de logs de Spring Security para obtener más información ante fallos.
# Una vez solucionado el problema, comentarlo.
#logging.level.org.springframework.security=trace

# Configuración para que la seguridad funcione como un Resource Server.
# Mi proyecto de authorization-server (spring-6-auth-server) se ejecuta en el puerto 9000, por eso indicamos este puerto.
# De ese proyecto obtenemos la key pública para poder validar el token JWT.
spring.security.oauth2.resourceserver.jwt.issuer-uri=http://localhost:9000

# Valores de nuestro client-id
spring.auth.server.client-id=oidc-client

# Cambiamos puerto para la sección Spring Cloud Gateway (no afecta a esta sección)
server.port=8081