spring.application.name=restmvc

# Esta property hace falta para que se vea el log.
# Estamos indicando que to-do lo que hay en el package com.jmunoz lo ponemos a nivel debug.
logging.level.com.jmunoz=debug

# Para trabajar con Logbook
logging.level.org.zalando.logbook=trace

# Hibernate puede crear un script de creacion de BD (nombre en este caso drop-and-create.sql,
# que es el indicado en la ultima property de las aqui indicadas)
# El problema es que, cada vez que se ejecuta el programa, aÃÂÃÂ±ade de nuevo los scripts en vez de sustituirlos.
# Se comenta para que no siga creciendo el fichero drop-and-create.sql con cada ejecucion
#
#spring.jpa.properties.jakarta.persistence.schema-generation.scripts.action=drop-and-create
#spring.jpa.properties.jakarta.persistence.schema-generation.scripts.create-source=metadata
#spring.jpa.properties.jakarta.persistence.schema-generation.scripts.drop-target=drop-and-create.sql
#spring.jpa.properties.jakarta.persistence.schema-generation.scripts.create-target=drop-and-create.sql

# Deshabilitamos Flyway
spring.flyway.enabled=false

# Cambiando el nivel de logs de Spring Security para obtener mÃÂÃÂ¡s informaciÃÂÃÂ³n ante fallos.
# Una vez solucionado el problema, comentarlo.
#logging.level.org.springframework.security=trace

# ConfiguraciÃÂÃÂ³n para que la seguridad funcione como un Resource Server.
# Mi proyecto de authorization-server (spring-6-auth-server) se ejecuta en el puerto 9000, por eso indicamos este puerto.
# De ese proyecto obtenemos la key pÃÂÃÂºblica para poder validar el token JWT.
spring.security.oauth2.resourceserver.jwt.issuer-uri=http://localhost:9000

# Valores de nuestro client-id
spring.auth.server.client-id=oidc-client

# Cambiamos puerto para la secciÃÂÃÂ³n Spring Cloud Gateway (no afecta a esta secciÃÂÃÂ³n)
server.port=8081

# Spring Boot Actuator para las sondas en Kubernetes
management.endpoint.health.probes.enabled=true
management.health.readinessstate.enabled=true
management.health.livenessstate.enabled=true

# Cashing
# Pensando que el cashing es como un map en memoria, tenemos que indicar que map queremos usar.
# Indicamos como map los que queramos, separados por coma (sin espacios)
spring.cache.cache-name=beerCache,beerListCache,customerCache,customerListCache

# Kafka
spring.kafka.consumer.group-id=sfg
spring.kafka.consumer.auto-offset-reset=earliest
spring,kafka.consumer.key-deserializer=org.apache.kafka.common.serialization.StringDeserializer
spring.kafka.consumer.value-deserializer=org.springframework.kafka.support.serializer.JsonDeserializer
spring.kafka.consumer.properties.spring.json.trusted.packages=*

spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer
spring.kafka.producer.value-serializer=org.springframework.kafka.support.serializer.JsonSerializer